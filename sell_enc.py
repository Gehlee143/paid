#ENCODED BY : MR-Adi
#GITHUB : Mradi007
#ENCRYPTION : Py3 BASE64
import base64
exec(base64.b64decode(b'I19fX19fX19fX19fX19fX19fX3wgSU1QT1JUIHxfX19fX19fX19fX19fX19fX18jCmZyb20gb3MgaW1wb3J0IHBhdGgKaW1wb3J0IHJlcXVlc3RzLHJhbmRvbSx1dWlkLHN0cmluZyxoYXNobGliLGpzb24KZnJvbSBvcyBpbXBvcnQgcGF0aApmcm9tIHVybGxpYi5yZXF1ZXN0IGltcG9ydCB1cmxvcGVuCmltcG9ydCBvcyxiYXNlNjQsemxpYixwaXAsdXJsbGliLHVybGxpYjMKaW1wb3J0IHBsYXRmb3JtLG1hdGgsc210cGxpYgppbXBvcnQgcGxhdGZvcm0KaW1wb3J0IHNtdHBsaWIKaW1wb3J0IG1hdGgKaW1wb3J0IG9zLGJhc2U2NCx6bGliLHBpcCx1cmxsaWIKZGVmIGNsZWFyKCk6CiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCnByaW50KGYnXHgxYlszODs1Ozht4p2yXHgxYlsxOzk3bT1ceDFiWzM4OzU7OG3inbNceDFiWzM4OzU7NDZtIElOU1RBTExFRCBTWVNURU0gJykKdHJ5OgogICAgICAgIGltcG9ydCBvcyxyZXF1ZXN0cyxqc29uLHRpbWUscmUscmFuZG9tLHN5cyx1dWlkLHN0cmluZyxzdWJwcm9jZXNzCiAgICAgICAgZnJvbSBzdHJpbmcgaW1wb3J0ICoKICAgICAgICBmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIHRyZWQKZXhjZXB0IE1vZHVsZU5vdEZvdW5kRXJyb3I6CiAgICAgICAgcHJpbnQoJ1xuIEluc3RhbGxpbmcgbWlzc2luZyBtb2R1bGVzIC4uLicpCiAgICAgICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCByZXF1ZXN0cyBmdXR1cmVzPT0yID4gL2Rldi9udWxsJykKICAgICAgICBvcy5zeXN0ZW0oJ3B5dGhvbiBFTVJBTi5weScpCmV4Y2VwdDpwYXNzCiNfX19fX19fX19fX19fX19fX198IEVUQyB8X19fX19fX19fX19fX19fX19fIwpzaW1faWQgPSAnJwphbmRyb2lkX3ZlcnNpb24gPSBzdWJwcm9jZXNzLmNoZWNrX291dHB1dCgnZ2V0cHJvcCByby5idWlsZC52ZXJzaW9uLnJlbGVhc2UnLHNoZWxsPVRydWUpLmRlY29kZSgndXRmLTgnKS5yZXBsYWNlKCdcbicsJycpCm1vZGVsID0gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoJ2dldHByb3Agcm8ucHJvZHVjdC5tb2RlbCcsc2hlbGw9VHJ1ZSkuZGVjb2RlKCd1dGYtOCcpLnJlcGxhY2UoJ1xuJywnJykKYnVpbGQgPSBzdWJwcm9jZXNzLmNoZWNrX291dHB1dCgnZ2V0cHJvcCByby5idWlsZC5pZCcsc2hlbGw9VHJ1ZSkuZGVjb2RlKCd1dGYtOCcpLnJlcGxhY2UoJ1xuJywnJykKZmJsYyA9ICdlbl9HQicKdHJ5OgogICAgICAgIGZiY3IgPSBzdWJwcm9jZXNzLmNoZWNrX291dHB1dCgnZ2V0cHJvcCBnc20ub3BlcmF0b3IuYWxwaGEnLHNoZWxsPVRydWUpLmRlY29kZSgndXRmLTgnKS5zcGxpdCgnLCcpWzBdLnJlcGxhY2UoJ1xuJywnJykKZXhjZXB0OgogICAgICAgIGZiY3IgPSAnWm9uZycKZmJtZiA9IHN1YnByb2Nlc3MuY2hlY2tfb3V0cHV0KCdnZXRwcm9wIHJvLnByb2R1Y3QubWFudWZhY3R1cmVyJyxzaGVsbD1UcnVlKS5kZWNvZGUoJ3V0Zi04JykucmVwbGFjZSgnXG4nLCcnKQpmYmJkID0gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoJ2dldHByb3Agcm8ucHJvZHVjdC5icmFuZCcsc2hlbGw9VHJ1ZSkuZGVjb2RlKCd1dGYtOCcpLnJlcGxhY2UoJ1xuJywnJykKZmJkdiA9IG1vZGVsCmZic3YgPSBhbmRyb2lkX3ZlcnNpb24KZmJjYSA9IHN1YnByb2Nlc3MuY2hlY2tfb3V0cHV0KCdnZXRwcm9wIHJvLnByb2R1Y3QuY3B1LmFiaWxpc3QnLHNoZWxsPVRydWUpLmRlY29kZSgndXRmLTgnKS5yZXBsYWNlKCcsJywnOicpLnJlcGxhY2UoJ1xuJywnJykKZmJkbSA9ICd7ZGVuc2l0eT0yLjI1LGhlaWdodD0nK3N1YnByb2Nlc3MuY2hlY2tfb3V0cHV0KCdnZXRwcm9wIHJvLmh3dWkudGV4dF9sYXJnZV9jYWNoZV9oZWlnaHQnLHNoZWxsPVRydWUpLmRlY29kZSgndXRmLTgnKS5yZXBsYWNlKCdcbicsJycpKycsd2lkdGg9JytzdWJwcm9jZXNzLmNoZWNrX291dHB1dCgnZ2V0cHJvcCByby5od3VpLnRleHRfbGFyZ2VfY2FjaGVfd2lkdGgnLHNoZWxsPVRydWUpLmRlY29kZSgndXRmLTgnKS5yZXBsYWNlKCdcbicsJycpCnRyeToKICAgICAgICBmYmNyID0gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoJ2dldHByb3AgZ3NtLm9wZXJhdG9yLmFscGhhJyxzaGVsbD1UcnVlKS5kZWNvZGUoJ3V0Zi04Jykuc3BsaXQoJywnKQogICAgICAgIHRvdGFsID0gMAogICAgICAgIGZvciBpIGluIGZiY3I6CiAgICAgICAgICAgICAgICB0b3RhbCs9MQogICAgICAgIHNlbGVjdCA9ICgnMScsJzInKQogICAgICAgIGlmIHNlbGVjdCA9PSAnMSc6CiAgICAgICAgICAgICAgICBmYmNyID0gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoJ2dldHByb3AgZ3NtLm9wZXJhdG9yLmFscGhhJyxzaGVsbD1UcnVlKS5kZWNvZGUoJ3V0Zi04Jykuc3BsaXQoJywnKVswXS5yZXBsYWNlKCdcbicsJycpCiAgICAgICAgICAgICAgICBzaW1faWQrPWZiY3IKICAgICAgICBlbGlmIHNlbGVjdCA9PSAnMic6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIGZiY3IgPSBzdWJwcm9jZXNzLmNoZWNrX291dHB1dCgnZ2V0cHJvcCBnc20ub3BlcmF0b3IuYWxwaGEnLHNoZWxsPVRydWUpLmRlY29kZSgndXRmLTgnKS5zcGxpdCgnLCcpWzFdLnJlcGxhY2UoJ1xuJywnJykKICAgICAgICAgICAgICAgICAgICAgICAgc2ltX2lkKz1mYmNyCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgICAgIGZiY3IgPSAiWm9uZyIKICAgICAgICAgICAgICAgICAgICAgICAgc2ltX2lkKz1mYmNyCiAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGZiY3IgPSAnWm9uZycKICAgICAgICAgICAgICAgIHNpbV9pZCs9ZmJjcgpleGNlcHQ6CiAgICAgICAgZmJjciA9ICJab25nIgpkZXZpY2UgPSB7CiAgICAgICAgJ2FuZHJvaWRfdmVyc2lvbic6YW5kcm9pZF92ZXJzaW9uLAogICAgICAgICdtb2RlbCc6bW9kZWwsCiAgICAgICAgJ2J1aWxkJzpidWlsZCwKICAgICAgICAnZmJsYyc6ZmJsYywKICAgICAgICAnZmJtZic6ZmJtZiwKICAgICAgICAnZmJiZCc6ZmJiZCwKICAgICAgICAnZmJkdic6bW9kZWwsCiAgICAgICAgJ2Zic3YnOmZic3YsCiAgICAgICAgJ2ZiY2EnOmZiY2EsCiAgICAgICAgJ2ZiZG0nOmZiZG19CiNfX19fX19fX19fX19fX19fX198IExPT1AgfF9fX19fX19fX19fX19fX19fXyMKbG9vcD0wO29rcz1bXTtjcHM9W107dHdmPVtdO3BjcD1bXTtpZD1bXTt0b2tlbmt1PVtdO3VpZD1bXQojX19fX19fX19fX19fX19fX19ffCBDT0xPVVIgfF9fX19fX19fX19fX19fX19fXyMKQSA9ICdceDFiWzE7OTdtJztSID0gJ1x4MWJbMzg7NTsxOTZtJztZID0gJ1wwMzNbMTszM20nO0cgPSAnXHgxYlszODs1OzQ2bSc7QiA9ICdceDFiWzM4OzU7OG0nO0cxID0gJ1x4MWJbMzg7NTs0OG0nO0cyID0gJ1x4MWJbMzg7NTs0N20nO0czID0gJ1x4MWJbMzg7NTs0OG0nO0c0ID0gJ1x4MWJbMzg7NTs0OW0nO0c1ID0gJ1x4MWJbMzg7NTs1MG0nO1ggPSAnXDMzWzE7MzRtJztYMSA9ICdceDFiWzM4OzU7MTRtJztYMiA9ICdceDFiWzM4OzU7MTIzbSc7WDMgPSAnXHgxYlszODs1OzEyMm0nO1g0ID0gJ1x4MWJbMzg7NTs4Nm0nO1g1ID0gJ1x4MWJbMzg7NTsxMjFtJztTID0gJ1x4MWJbMTs5Nm0nO00gPSAnXHgxYlszODs1OzIwNW0nCiNfX19fX19fX19fX19fX19fX198IExJTkUgfF9fX19fX19fX19fX19fX19fXyMKZGVmIGNsZWFyKCk6b3Muc3lzdGVtKCdjbGVhcicpO3ByaW50KGxvZ28pCmRlZiBsaW5leCgpOnByaW50KGYne0F94pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBJykKI19fX19fX19fX19fX19fX19fX3wgVUEgfF9fX19fX19fX19fX19fX19fXyMKZGVmIHN3YWcoKToKCW9wcG8gPSByYW5kb20uY2hvaWNlKFsiQ05NNjMyIiwgIkNQSDExMTQiLCAiQ1BIMTIzNSIsICJDUEgxNDUxIiwgIkNQSDE2MTUiLCAiQ1BIMTY2NCIsICJDUEgxODY5IiwgIkNQSDE5MjkiLCAiQ1BIMTk4NSIsCiAgICAiQ1BIMjA0OCIsICJDUEgyMTA3IiwgIkNQSDIyMzgiLCAiQ1BIMjI2MSIsICJDUEgyMzMxIiwgIkNQSDIzMzIiLCAiQ1BIMjM1MSIsICJDUEgyMzg5IiwgIkNQSDI0NTEiLAogICAgIkNQSDI0OTEiLCAiQ1BIMjUxMyIsICJDUEgyNTE1IiwgIkNQSDI1MTkiLCAiQ1BIMjUyMSIsICJDUEgyNTIzIiwgIkNQSDI1MjUiLCAiQ1BIMjUyOSIsICJDUEgyNTUxIiwKICAgICJDUEgyNTY5IiwgIkNQSDI1NzkiLCAiQ1BIMjU4OSIsICJDUEgyNTkxIiwgIkNQSDI2NDMiLCAiQ1BIMzQ3NSIsICJDUEgzNjY5IiwgIkNQSDM2ODIiLCAiQ1BIMzczMSIsCiAgICAiQ1BIMzc3NiIsICJDUEgzNzg1IiwgIkNQSDQxMjUiLCAiQ1BINDI3NSIsICJDUEg0Mjk5IiwgIkNQSDQzOTUiLCAiQ1BINDQ3MyIsICJDUEg0OTg3IiwgIkNQSDUyODYiLAogICAgIkNQSDU4NDEiLCAiQ1BINTk0NyIsICJDUEg2MTc4IiwgIkNQSDYyNDQiLCAiQ1BINjI3MSIsICJDUEg2MzE2IiwgIkNQSDY1MTkiLCAiQ1BINjUyOCIsICJDUEg2Njk3IiwKICAgICJDUEg3MzM4IiwgIkNQSDczNjQiLCAiQ1BINzM4MiIsICJDUEg3NTMyIiwgIkNQSDc1NzciLCAiQ1BINzk0OCIsICJDUEg3OTkxIiwgIkNQSDgxNTMiLCAiQ1BIODM0NiIsCiAgICAiQ1BIODM0NyIsICJDUEg4MzYzIiwgIkNQSDgzOTMiLCAiQ1BIODQ2NyIsICJDUEg4NDcyIiwgIkNQSDg1MzQiLCAiQ1BIODY4NiIsICJDUEg4ODkzIiwgIkNQSDkxNzciLAogICAgIkNQSDkyMjYiLCAiQ1BIOTY1OSIsICJDUEg5NjY3IiwgIkNQSDk3MTYiLCAiQ1BIOTc2MyIsICJDUEg5ODM5IiwgIkNQSDk5MjkiXSkKCXVhID0gZidbRkJBTi9GQjRBO0ZCQVYvJytzdHIocmFuZG9tLnJhbmRpbnQoMTExLDk5OSkpKycuMC4wLicrc3RyKHJhbmRvbS5yYW5kaW50KDExMTEsOTk5OSkpKyc7RkJCVi8nK3N0cihyYW5kb20ucmFuZGludCgxMTExMTExLDk5OTk5OTkpKSsnO1tGQkFOL0ZCNEE7RkJBVi8nK3N0cihyYW5kb20ucmFuZGludCgxMTEsOTk5KSkrJy4wLjAuNDguJysnMTIyO0ZCQlYvJytzdHIocmFuZG9tLnJhbmRpbnQoMTExMTExMSw5OTk5OTk5KSkrJztGQkRNL3tkZW5zaXR5PTInKycuMCx3aWR0aD0nKyc3MjAsaGVpZ2h0PScrJzE0NTZ9O0ZCTEMvaXRfSVQ7RkJSVi8yNzM0NzQxMTg7RkJDUi9JIFRJTTtGQk1GL09QUE87RkJCRC9PUFBPO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWLycrc3RyKG9wcG8pKyc7RkJTVi8xMDtGQkJLLzE7RkJPUC8xO0ZCQ0EvYXJtNjQtdjhhOjtdJwoJcmV0dXJuIHVhCiNfX19fX19fX19fX19fX19fX198IExPR08gfF9fX19fX19fX19fX19fX19fXyMKbG9nbz0oZiIiIgpcMDMzWzM4OzU7NDZtODg4ODg4ODg4OCBcMDMzWzMzOzFtODg4ICAgIDg4OCAgXDAzM1szNDsxbS5kODg4OGIuICAKXDAzM1szODs1OzQ2bTg4OCAgICAgICAgXDAzM1szMzsxbTg4OCAgICA4ODggXDAzM1szNDsxbWQ4OFAgIFk4OGIgClwwMzNbMzg7NTs0Nm04ODggICAgICAgIFwwMzNbMzM7MW04ODggICAgODg4IFwwMzNbMzQ7MW04ODggICAgODg4IApcMDMzWzM4OzU7NDZtODg4ODg4OCAgICBcMDMzWzMzOzFtODg4ODg4ODg4OCBcMDMzWzM0OzFtODg4ICAgICAgICAKXDAzM1szODs1OzQ2bTg4OCAgICAgICAgXDAzM1szMzsxbTg4OCAgICA4ODggXDAzM1szNDsxbTg4OCAgICAgICAgClwwMzNbMzg7NTs0Nm04ODggICAgICAgIFwwMzNbMzM7MW04ODggICAgODg4IFwwMzNbMzQ7MW04ODggICAgODg4IApcMDMzWzM4OzU7NDZtODg4ICAgICAgICBcMDMzWzMzOzFtODg4ICAgIDg4OCBcMDMzWzM0OzFtWTg4YiAgZDg4UCAKXDAzM1szODs1OzQ2bTg4ODg4ODg4ODggXDAzM1szMzsxbTg4OCAgICA4ODggIFwwMzNbMzQ7MW0iWTg4ODhQIiAKXDAzM1szODs1OzQ2bT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIiIikKI19fX19fX19fX19fX19fX19fX3wgTUFJTiB8X19fX19fX19fX19fX19fX19fIwpkZWYgbWVudSgpOgogICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXIoKQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ3tCfeKdsntBfTF7Qn3inbN7R30gRklMRSBDTE9OSU5HIFxue0J94p2ye0F9MntCfeKds3tHfSBSQU5ET00gQ0xPTklOR1xue0J94p2ye0F9M3tCfeKds3tHfSBDT05UQUNUIFRPT0wgT1dORVJcbntCfeKdsntBfTB7Qn3inbN7R30gRVhJVCBUT09MJykKICAgICAgICAgICAgICAgICAgICAgICAgbGluZXgoKQogICAgICAgICAgICAgICAgICAgICAgICB4ZD1pbnB1dChmJ3tCfeKdsntBfT97Qn3inbN7R30gQ0hPSUNFIDogJykKICAgICAgICAgICAgICAgICAgICAgICAgaWYgeGQgaW4gWycxJywnMDEnXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcigpO3ByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBFWEFNUExFIDogL3NkY2FyZC9YWC50eHQgJyk7bGluZXgoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUgPSBpbnB1dChmJ3tCfeKdsntBfT97Qn3inbN7R30gRklMRSBOQU1FIDogJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbyA9IG9wZW4oZmlsZSwncicpLnJlYWQoKS5zcGxpdGxpbmVzKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gRklMRSBMT0NBVElPTiBOT1QgRk9VTkQgJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ3tCfeKdsntBfTF7Qn3inbN7R30gTUVUSE9EIHtCfeKdsntBfU0xe0J94p2zXG57Qn3inbJ7QX0ye0J94p2ze0d9IE1FVEhPRCB7Qn3inbJ7QX1NMntCfeKds1xue0J94p2ye0F9M3tCfeKds3tHfSBNRVRIT0Qge0J94p2ye0F9TTN7Qn3inbMnKTtsaW5leCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXRoZD1pbnB1dChmJ3tCfeKdsntBfT97Qn3inbN7R30gQ0hPSUNFIDogJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxpc3QgPSBbXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnICAgICAgICAgICAgICAgICAgUEFTU1dPUkQgU1lTVEVNJyk7bGluZXgoKTtwcmludChmJ3tCfeKdsntBfTF7Qn3inbN7R30gQVVUTyBQQVNTV09SRCBDTE9ORVxue0J94p2ye0F9MntCfeKds3tHfSBDSE9JQ0UgUEFTU1dPUkQgQ0xPTkUnKTtsaW5leCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHBwPWlucHV0KGYne0J94p2ye0F9P3tCfeKds3tHfSBDSE9JQ0UgOiAnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHBwcCBpbiBbJzEnLCcwMSddOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxpc3QuYXBwZW5kKCdmaXJzdCBsYXN0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsaXN0LmFwcGVuZCgnZmlyc3RsYXN0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsaXN0LmFwcGVuZCgnZmlyc3QxMjMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxpc3QuYXBwZW5kKCdmaXJzdDEyMzQ1JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsaXN0LmFwcGVuZCgnRmlyc3QgTGFzdCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGlzdC5hcHBlbmQoJ2ZpcnN0Nzg2JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsaXN0LmFwcGVuZCgnZmlyc3RsYXN0MTIzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsaXN0LmFwcGVuZCgnZmlyc3RsYXN0Nzg2JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBzX2xpbWl0ID0gaW50KGlucHV0KGYne0J94p2ye0F9PXtCfeKds3tHfSBQQVNTV09SRCBMSU1JVCA6ICcpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwc19saW1pdCA9MQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXIoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IEVYQU1QTEUgOiBmaXJzdGxhc3R7Qn0ve0d9Zmlyc3RAQHtCfS97R31maXJzdDEyMyAnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXgoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UocHNfbGltaXQpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGlzdC5hcHBlbmQoaW5wdXQoZid7Qn3inbJ7QX09e0J94p2ze0d9IFBBU1NXT1JEIE5PIHtpKzF9IDp7QX0gJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXIoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBDUCBJRCBTSE9XICh5L24pICcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXgoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN4PWlucHV0KGYne0J94p2ye0F9P3tCfeKds3tHfSBDSE9JQ0UgOiAnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGN4IGluIFsneScsJ1knLCd5ZXMnLCdZZXMnLCcxJ106CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwY3AuYXBwZW5kKCd5JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGNwLmFwcGVuZCgnbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCB0cmVkKG1heF93b3JrZXJzPTMwKSBhcyBjcmFja19zdWJtaXQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbF9pZHMgPSBzdHIobGVuKGZvKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBUT1RBTCBBQ0NPVU5UIDp7QX0gJyt0b3RhbF9pZHMrZicge0d9PHtBfS17R30+IE1FVEhPRCA6e0F9IE17bXRoZH0nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IFVTRSBGTElHSFQgTU9ERSBGT1IgU1BFRUQgVVAnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXgoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHVzZXIgaW4gZm86CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkcyxuYW1lcyA9IHVzZXIuc3BsaXQoJ3wnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzbGlzdCA9IHBsaXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG10aGQgaW4gWycxJywnMDEnXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmFja19zdWJtaXQuc3VibWl0KGFwaTEsaWRzLG5hbWVzLHBhc3NsaXN0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmIG10aGQgaW4gWycyJywnMDInXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmFja19zdWJtaXQuc3VibWl0KGFwaTIsaWRzLG5hbWVzLHBhc3NsaXN0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmIG10aGQgaW4gWyczJywnMDMnXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmFja19zdWJtaXQuc3VibWl0KGFwaTMsaWRzLG5hbWVzLHBhc3NsaXN0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCdcMDMzWzE7MzdtJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ1xye0F94pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gVEhFIFBST0NFU1MgSEFTIENPTVBMRVRFRCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IFRPVEFMIE9LL0NQIDogJytzdHIobGVuKG9rcykpKycvJytzdHIobGVuKGNwcykpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHJ7QX3ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0KGYne0J94p2ye0F9PXtCfeKds3tHfSBQUkVTUyBFTlRFUiBUTyBCQUNLICcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudSgpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgeGQgaW4gWycyJywnMDInXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5kbSgpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgeGQgaW4gWyczJywnMDMnXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ3hkZy1vcGVuIEBXRUxMQ09NRWVoY0NZQkVSY2VvRU1SQU4nKTttZW51KCkKICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiB4ZCBpbiBbJzAnLCcwNSddOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXQoZid7Qn3inbJ7QX09e0J94p2ze0d9IEVYSVQgRE9ORSAnKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXQoZid7Qn3inbJ7QX09e0J94p2ze0d9IE9QVElPTiBOT1QgRk9VTkQgSU4gTUVOVS4uLicpCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgICAgICBleGl0KCkKICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6CiAgICAgICAgICAgICAgICBwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gTk8gSU5URVJORVQgQ09OTkVDVElPTi4uLicpCiAgICAgICAgICAgICAgICBleGl0KCkKI19fX19fX19fX19fX19fX19fX3wgUkFORE9NIHxfX19fX19fX19fX19fX19fX18jCmRlZiByYW5kbSgpOgogICAgY2xlYXIoKQogICAgcHJpbnQoZid7Qn3inbJ7QX0xe0J94p2ze0d9IEJBTkdMQURFU0ggQ0xPTklORyAnKQogICAgcHJpbnQoZid7Qn3inbJ7QX0ye0J94p2ze0d9IElORElBIENMT05JTkcgJykKICAgIHByaW50KGYne0J94p2ye0F9M3tCfeKds3tHfSBORVBBTCBDTE9OSU5HICcpCiAgICBwcmludChmJ3tCfeKdsntBfTR7Qn3inbN7R30gUEFLSVNUQU4gQ0xPTklORyAnKQogICAgcHJpbnQoZid7Qn3inbJ7QX01e0J94p2ze0d9IEFGR0hBTklTVEFOIENMT05JTkcgJykKICAgIHByaW50KGYne0J94p2ye0F9NntCfeKds3tHfSBHTUFJTCBDTE9OSU5HICcpCiAgICBwcmludChmJ3tCfeKdsntBfTB7Qn3inbN7R30gQkFDSyBUTyBNRU5VICcpO2xpbmV4KCkKICAgIG9wdGlvbj1pbnB1dChmJ3tCfeKdsntBfT97Qn3inbN7R30gQ0hPSUNFIDogJykKICAgIGlmIG9wdGlvbiBpbiBbJzEnLCdBJ106CiAgICAgICAgYmQoKQogICAgZWxpZiBvcHRpb24gaW4gWycyJywnQiddOgogICAgCWluZGlhKCkKICAgIGVsaWYgb3B0aW9uIGluIFsnMycsJ0MnXToKICAgIAluZXBhbCgpCiAgICBlbGlmIG9wdGlvbiBpbiBbJzQnLCdEJ106CiAgICAJcGFraXN0YW4oKQogICAgZWxpZiBvcHRpb24gaW4gWyc1JywnRSddOgogICAgCWFmZ2hhbmlzdGFuKCkKICAgIGVsaWYgb3B0aW9uIGluIFsnNicsJzAwJ106CiAgICAJZ21haWwoKQogICAgZWxpZiBvcHRpb24gaW4gWycwJywnMDAnXToKICAgIAltZW51KCkKICAgIGVsc2U6CiAgICAgICAgZXhpdChmJ3tCfeKdsntBfT17Qn3inbN7R30gQllFIEJZRSAnKQojX19fX19fX19fX19fX19fX19ffCBCQU5HTEFERVNIIHxfX19fX19fX19fX19fX19fX18jCmRlZiBiZCgpOgoJCXVzZXI9W10KCQljbGVhcigpCgkJcHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IEVYQU1QTEUgOiAwMTcgfCAwMTkgfCAwMTggfCAwMTYgJyk7bGluZXgoKQoJCWNvZGUgPSBpbnB1dChmJ3tCfeKdsntBfT97Qn3inbN7R30gQ0hPSUNFICA6ICcpCgkJY2xlYXIoKTtwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gRVhBTVBMRSA6IDMwMDAgfCA1MDAwIHwgMTAwMDAgfCA5OTk5OSAnKTtsaW5leCgpCgkJbGltaXQgPSBpbnQoaW5wdXQoZid7Qn3inbJ7QX0/e0J94p2ze0d9IENIT0lDRSAgOiAnKSkKCQljbGVhcigpCgkJcHJpbnQoZid7Qn3inbJ7QX0xe0J94p2ze0d9IE1FVEhPRCB7Qn3inbJ7QX1NMXtCfeKds3tHfSBcbntCfeKdsntBfTJ7Qn3inbN7R30gTUVUSE9EIHtCfeKdsntBfU0ye0J94p2ze0d9XG57Qn3inbJ7QX0ze0J94p2ze0d9IE1FVEhPRCB7Qn3inbJ7QX1NM3tCfeKds3tHfSAnKTtsaW5leCgpCgkJbXRoZCA9IGlucHV0KGYne0J94p2ye0F9P3tCfeKds3tHfSBDSE9JQ0UgIDogJykKCQlmb3Igbm1iciBpbiByYW5nZShsaW1pdCk6CgkJCW5tcD0nJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoOCkpCgkJCXVzZXIuYXBwZW5kKG5tcCkKCQl3aXRoIHRyZWQobWF4X3dvcmtlcnM9MzApIGFzIGhhYmliOgkKCQkJY2xlYXIoKQoJCQl0bCA9IHN0cihsZW4odXNlcikpCgkJCXByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBTSU0gQ09ERSA6e0F9IHtjb2RlfSAnKQoJCQlwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gVE9UQUwgSUQgOntBfSB7dGx9ICcpCgkJCXByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBVU0UgRkxJR0hUIE1PREUgRk9SIFNQRUVEIFVQJyk7bGluZXgoKQoJCQlmb3IgcHN4IGluIHVzZXI6CgkJCQl1aWQgPSBjb2RlK3BzeAoJCQkJcGFzc2xpc3QgPSBbcHN4LHVpZCwnQmFuZ2xhZGVzaCcsJ2JhbmdsYWRlc2gnLCdpIGxvdmUgeW91JywnaWxvdmV5b3UnLCdmcmVlIGZpcmUnLCdmcmVlZmlyZSddCgkJCQlpZiBtdGhkIGluIFsnMScsJzAxJ106CgkJCQkJaGFiaWIuc3VibWl0KHJuZG0xLHVpZCxwYXNzbGlzdCkKCQkJCWlmIG10aGQgaW4gWycyJywnMDInXToKCQkJCQloYWJpYi5zdWJtaXQocm5kbTIsdWlkLHBhc3NsaXN0KQoJCQkJaWYgbXRoZCBpbiBbJzMnLCcwMyddOgoJCQkJCWhhYmliLnN1Ym1pdChybmRtMyx1aWQscGFzc2xpc3QpCgkJcHJpbnQoJ1wwMzNbMTszN20nKQoJCXByaW50KGYnXHJ7QX3ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEnKQoJCXByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBUSEUgUFJPQ0VTUyBIQVMgQ09NUExFVEVEJykKCQlwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gVE9UQUwgT0sgSUQgOiAnK3N0cihsZW4ob2tzKSkpCgkJcHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IFRPVEFMIENQIElEIDogJytzdHIobGVuKGNwcykpKQoJCXByaW50KGYnXHJ7QX3ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEnKQoJCWlucHV0KGYne0J94p2ye0F9PXtCfeKds3tHfSBQUkVTUyBFTlRFUiBUTyBCQUNLICcpCgkJbWVudSgpCiNfX19fX19fX19fX19fX19fX198IElORElBIHxfX19fX19fX19fX19fX19fX18jCmRlZiBpbmRpYSgpOgoJCXVzZXI9W10KCQljbGVhcigpCgkJcHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IEVYQU1QTEUgOiArOTE2MzkgfCArOTE5MzQgfCArOTE5MDIgfCArOTE5MzcgJyk7bGluZXgoKQoJCWNvZGUgPSBpbnB1dChmJ3tCfeKdsntBfT97Qn3inbN7R30gQ0hPSUNFICA6ICcpCgkJY2xlYXIoKTtwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gRVhBTVBMRSA6IDMwMDAgfCA1MDAwIHwgMTAwMDAgfCA5OTk5OSAnKTtsaW5leCgpCgkJbGltaXQgPSBpbnQoaW5wdXQoZid7Qn3inbJ7QX0/e0J94p2ze0d9IENIT0lDRSAgOiAnKSkKCQljbGVhcigpCgkJcHJpbnQoZid7Qn3inbJ7QX0xe0J94p2ze0d9IE1FVEhPRCB7Qn3inbJ7QX1NMXtCfeKds3tHfSBcbntCfeKdsntBfTJ7Qn3inbN7R30gTUVUSE9EIHtCfeKdsntBfU0ye0J94p2ze0d9XG57Qn3inbJ7QX0ze0J94p2ze0d9IE1FVEhPRCB7Qn3inbJ7QX1NM3tCfeKds3tHfSAnKTtsaW5leCgpCgkJbXRoZCA9IGlucHV0KGYne0J94p2ye0F9P3tCfeKds3tHfSBDSE9JQ0UgIDogJykKCQlmb3Igbm1iciBpbiByYW5nZShsaW1pdCk6CgkJCW5tcCA9ICIiLiBqb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoNykpCgkJCXVzZXIuYXBwZW5kKG5tcCkKCQl3aXRoIHRyZWQobWF4X3dvcmtlcnM9MzApIGFzIGhhYmliOgkKCQkJY2xlYXIoKQoJCQl0bCA9IHN0cihsZW4odXNlcikpCgkJCXByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBTSU0gQ09ERSA6e0F9IHtjb2RlfSAnKQoJCQlwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gVE9UQUwgSUQgOntBfSB7dGx9ICcpCgkJCXByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBVU0UgRkxJR0hUIE1PREUgRk9SIFNQRUVEIFVQJyk7bGluZXgoKQoJCQlmb3IgcHN4IGluIHVzZXI6CgkJCQl1aWQgPSBjb2RlK3BzeAoJCQkJcGFzc2xpc3QgPSBbcHN4LHVpZFs6OF0sJzU3MjczMjAwJywnNTkwMzkyMDAnLCc1NzU3NTc1MSddCgkJCQlpZiBtdGhkIGluIFsnMScsJzAxJ106CgkJCQkJaGFiaWIuc3VibWl0KHJuZG0xLHVpZCxwYXNzbGlzdCkKCQkJCWlmIG10aGQgaW4gWycyJywnMDInXToKCQkJCQloYWJpYi5zdWJtaXQocm5kbTIsdWlkLHBhc3NsaXN0KQoJCQkJaWYgbXRoZCBpbiBbJzMnLCcwMyddOgoJCQkJCWhhYmliLnN1Ym1pdChybmRtMyx1aWQscGFzc2xpc3QpCgkJcHJpbnQoJ1wwMzNbMTszN20nKQoJCXByaW50KGYnXHJ7QX3ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEnKQoJCXByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBUSEUgUFJPQ0VTUyBIQVMgQ09NUExFVEVEJykKCQlwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gVE9UQUwgT0sgSUQgOiAnK3N0cihsZW4ob2tzKSkpCgkJcHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IFRPVEFMIENQIElEIDogJytzdHIobGVuKGNwcykpKQoJCXByaW50KGYnXHJ7QX3ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEnKQoJCWlucHV0KGYne0J94p2ye0F9PXtCfeKds3tHfSBQUkVTUyBFTlRFUiBUTyBCQUNLICcpCgkJbWVudSgpCiNfX19fX19fX19fX19fX19fX198IE5FUEFMIHxfX19fX19fX19fX19fX19fX18jCmRlZiBuZXBhbCgpOgoJCXVzZXI9W10KCQljbGVhcigpCgkJcHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IEVYQU1QTEUgOiA5ODE1IHwgOTgxNCB8IDk4NjEgfCA5ODQwICcpO2xpbmV4KCkKCQljb2RlID0gaW5wdXQoZid7Qn3inbJ7QX0/e0J94p2ze0d9IENIT0lDRSAgOiAnKQoJCWNsZWFyKCk7cHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IEVYQU1QTEUgOiAzMDAwIHwgNTAwMCB8IDEwMDAwIHwgOTk5OTkgJyk7bGluZXgoKQoJCWxpbWl0ID0gaW50KGlucHV0KGYne0J94p2ye0F9P3tCfeKds3tHfSBDSE9JQ0UgIDogJykpCgkJY2xlYXIoKQoJCXByaW50KGYne0J94p2ye0F9MXtCfeKds3tHfSBNRVRIT0Qge0J94p2ye0F9TTF7Qn3inbN7R30gXG57Qn3inbJ7QX0ye0J94p2ze0d9IE1FVEhPRCB7Qn3inbJ7QX1NMntCfeKds3tHfVxue0J94p2ye0F9M3tCfeKds3tHfSBNRVRIT0Qge0J94p2ye0F9TTN7Qn3inbN7R30gJyk7bGluZXgoKQoJCW10aGQgPSBpbnB1dChmJ3tCfeKdsntBfT97Qn3inbN7R30gQ0hPSUNFICA6ICcpCgkJZm9yIG5tYnIgaW4gcmFuZ2UobGltaXQpOgoJCQlubXAgPSAiIi4gam9pbihyYW5kb20uY2hvaWNlKHN0cmluZy5kaWdpdHMpIGZvciBfIGluIHJhbmdlKDYpKQoJCQl1c2VyLmFwcGVuZChubXApCgkJd2l0aCB0cmVkKG1heF93b3JrZXJzPTMwKSBhcyBoYWJpYjoJCgkJCWNsZWFyKCkKCQkJdGwgPSBzdHIobGVuKHVzZXIpKQoJCQlwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gU0lNIENPREUgOntBfSB7Y29kZX0gJykKCQkJcHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IFRPVEFMIElEIDp7QX0ge3RsfSAnKQoJCQlwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gVVNFIEZMSUdIVCBNT0RFIEZPUiBTUEVFRCBVUCcpO2xpbmV4KCkKCQkJZm9yIHBzeCBpbiB1c2VyOgoJCQkJdWlkID0gY29kZStwc3gKCQkJCXBhc3NsaXN0ID0gW3VpZCxwc3gsdWlkWzo4XSx1aWRbOjddLHVpZFs6Nl0sJ25lcGFsMTInLCduZXBhbDEyMycsJ25lcGFsMTIzNCcsJ25lcGFsMTIzNDUnLCdtYXlhMTIzJywna2F0aG1hbmR1JywncG9raGFyYScsJ3RhbWFuZycsJ21heWExMjM0JywndGFtYW5nMTIzJywndGFtYW5nMTIzNDUnLCduZXBhbEAxMjMnLCdrYXRobWFuZHUxMjMnXQoJCQkJaWYgbXRoZCBpbiBbJzEnLCcwMSddOgoJCQkJCWhhYmliLnN1Ym1pdChybmRtMSx1aWQscGFzc2xpc3QpCgkJCQlpZiBtdGhkIGluIFsnMicsJzAyJ106CgkJCQkJaGFiaWIuc3VibWl0KHJuZG0yLHVpZCxwYXNzbGlzdCkKCQkJCWlmIG10aGQgaW4gWyczJywnMDMnXToKCQkJCQloYWJpYi5zdWJtaXQocm5kbTMsdWlkLHBhc3NsaXN0KQoJCXByaW50KCdcMDMzWzE7MzdtJykKCQlwcmludChmJ1xye0F94pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBJykKCQlwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gVEhFIFBST0NFU1MgSEFTIENPTVBMRVRFRCcpCgkJcHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IFRPVEFMIE9LIElEIDogJytzdHIobGVuKG9rcykpKQoJCXByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBUT1RBTCBDUCBJRCA6ICcrc3RyKGxlbihjcHMpKSkKCQlwcmludChmJ1xye0F94pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBJykKCQlpbnB1dChmJ3tCfeKdsntBfT17Qn3inbN7R30gUFJFU1MgRU5URVIgVE8gQkFDSyAnKQoJCW1lbnUoKQojX19fX19fX19fX19fX19fX19ffCBQQUtJU1RBTiB8X19fX19fX19fX19fX19fX19fIwpkZWYgcGFraXN0YW4oKToKCQl1c2VyPVtdCgkJY2xlYXIoKQoJCXByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBFWEFNUExFIDogMDMwNiB8IDAzMzUgfCAwMzE1IHwgMDM0NSAnKTtsaW5leCgpCgkJY29kZSA9IGlucHV0KGYne0J94p2ye0F9P3tCfeKds3tHfSBDSE9JQ0UgIDogJykKCQljbGVhcigpO3ByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBFWEFNUExFIDogMzAwMCB8IDUwMDAgfCAxMDAwMCB8IDk5OTk5ICcpO2xpbmV4KCkKCQlsaW1pdCA9IGludChpbnB1dChmJ3tCfeKdsntBfT97Qn3inbN7R30gQ0hPSUNFICA6ICcpKQoJCWNsZWFyKCkKCQlwcmludChmJ3tCfeKdsntBfTF7Qn3inbN7R30gTUVUSE9EIHtCfeKdsntBfU0xe0J94p2ze0d9IFxue0J94p2ye0F9MntCfeKds3tHfSBNRVRIT0Qge0J94p2ye0F9TTJ7Qn3inbN7R31cbntCfeKdsntBfTN7Qn3inbN7R30gTUVUSE9EIHtCfeKdsntBfU0ze0J94p2ze0d9ICcpO2xpbmV4KCkKCQltdGhkID0gaW5wdXQoZid7Qn3inbJ7QX0/e0J94p2ze0d9IENIT0lDRSAgOiAnKQoJCWZvciBubWJyIGluIHJhbmdlKGxpbWl0KToKCQkJbm1wID0gIiIuIGpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSg3KSkKCQkJdXNlci5hcHBlbmQobm1wKQoJCXdpdGggdHJlZChtYXhfd29ya2Vycz0zMCkgYXMgaGFiaWI6CQoJCQljbGVhcigpCgkJCXRsID0gc3RyKGxlbih1c2VyKSkKCQkJcHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IFNJTSBDT0RFIDp7QX0ge2NvZGV9ICcpCgkJCXByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBUT1RBTCBJRCA6e0F9IHt0bH0gJykKCQkJcHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IFVTRSBGTElHSFQgTU9ERSBGT1IgU1BFRUQgVVAnKTtsaW5leCgpCgkJCWZvciBwc3ggaW4gdXNlcjoKCQkJCXVpZCA9IGNvZGUrcHN4CgkJCQlwYXNzbGlzdCA9IFtwc3gsdWlkLCdraGFua2hhbicsJ2toYW4xMTIyJywnYWxpMTIzNDUnLCdraGFuYmFiYScsJ3Bha2lzdGFuJywna2hhbjEyMzQ1JywnYWxpMTEyMicsJ2toYW5raGFuMTIzNDUnLCdraGFuJywnYmFsb2NoJywncHViZycsJ3B1YmcxMTIyJ10KCQkJCWlmIG10aGQgaW4gWycxJywnMDEnXToKCQkJCQloYWJpYi5zdWJtaXQocm5kbTEsdWlkLHBhc3NsaXN0KQoJCQkJaWYgbXRoZCBpbiBbJzInLCcwMiddOgoJCQkJCWhhYmliLnN1Ym1pdChybmRtMix1aWQscGFzc2xpc3QpCgkJCQlpZiBtdGhkIGluIFsnMycsJzAzJ106CgkJCQkJaGFiaWIuc3VibWl0KHJuZG0zLHVpZCxwYXNzbGlzdCkKCQlwcmludCgnXDAzM1sxOzM3bScpCgkJcHJpbnQoZidccntBfeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgScpCgkJcHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IFRIRSBQUk9DRVNTIEhBUyBDT01QTEVURUQnKQoJCXByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBUT1RBTCBPSyBJRCA6ICcrc3RyKGxlbihva3MpKSkKCQlwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gVE9UQUwgQ1AgSUQgOiAnK3N0cihsZW4oY3BzKSkpCgkJcHJpbnQoZidccntBfeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgScpCgkJaW5wdXQoZid7Qn3inbJ7QX09e0J94p2ze0d9IFBSRVNTIEVOVEVSIFRPIEJBQ0sgJykKCQltZW51KCkKI19fX19fX19fX19fX19fX19fX3wgQUZHSEFOSVNUQU4gfF9fX19fX19fX19fX19fX19fXyMKZGVmIGFmZ2hhbmlzdGFuKCk6CgkJdXNlcj1bXQoJCWNsZWFyKCkKCQlwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gRVhBTVBMRSA6ICs5MzQwIHwgKzkzNjAgfCArOTMzMCB8ICs5MzUwJyk7bGluZXgoKQoJCWNvZGUgPSBpbnB1dChmJ3tCfeKdsntBfT97Qn3inbN7R30gQ0hPSUNFICA6ICcpCgkJY2xlYXIoKTtwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gRVhBTVBMRSA6IDMwMDAgfCA1MDAwIHwgMTAwMDAgfCA5OTk5OSAnKTtsaW5leCgpCgkJbGltaXQgPSBpbnQoaW5wdXQoZid7Qn3inbJ7QX0/e0J94p2ze0d9IENIT0lDRSAgOiAnKSkKCQljbGVhcigpCgkJcHJpbnQoZid7Qn3inbJ7QX0xe0J94p2ze0d9IE1FVEhPRCB7Qn3inbJ7QX1NMXtCfeKds3tHfSBcbntCfeKdsntBfTJ7Qn3inbN7R30gTUVUSE9EIHtCfeKdsntBfU0ye0J94p2ze0d9XG57Qn3inbJ7QX0ze0J94p2ze0d9IE1FVEhPRCB7Qn3inbJ7QX1NM3tCfeKds3tHfSAnKTtsaW5leCgpCgkJbXRoZCA9IGlucHV0KGYne0J94p2ye0F9P3tCfeKds3tHfSBDSE9JQ0UgIDogJykKCQlmb3Igbm1iciBpbiByYW5nZShsaW1pdCk6CgkJCW5tcCA9ICIiLiBqb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoNykpCgkJCXVzZXIuYXBwZW5kKG5tcCkKCQl3aXRoIHRyZWQobWF4X3dvcmtlcnM9MzApIGFzIGhhYmliOgkKCQkJY2xlYXIoKQoJCQl0bCA9IHN0cihsZW4odXNlcikpCgkJCXByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBTSU0gQ09ERSA6e0F9IHtjb2RlfSAnKQoJCQlwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gVE9UQUwgSUQgOntBfSB7dGx9ICcpCgkJCXByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBVU0UgRkxJR0hUIE1PREUgRk9SIFNQRUVEIFVQJyk7bGluZXgoKQoJCQlmb3IgcHN4IGluIHVzZXI6CgkJCQl1aWQgPSBjb2RlK3BzeAoJCQkJcGFzc2xpc3QgPSBbcHN4LHVpZCwnYWZnaGFuJywnYWZnaGFuMTIzNDUnLCdhZmdoYW4xMjMnLCc2MDA3MDAnLCdhZmdoYW5pc3RhbicsJ2FmZ2hhbjExMjInLCc1MDA1MDAnLCcxMDAyMDAnLCcxMDAwMjAwMCcsJzkwMDkwMCcsJ2thYnVsMTIzJywnw5vCscObwrPDm8Kzw5vCs8ObwrXDm8K2w5vCt8ObwrjDm8K5Jywnw5vCscObwrPDm8Kzw5vCs8ObwrXDm8K2JywnYWZnaGFuMTIzNCcsJ2thYnVsMTIzNCcsJ2toYW5raGFuJywna2hhbjEyMycsJ2toYW4xMjM0NTYnLCdraGFuNzg2J10KCQkJCWlmIG10aGQgaW4gWycxJywnMDEnXToKCQkJCQloYWJpYi5zdWJtaXQocm5kbTEsdWlkLHBhc3NsaXN0KQoJCQkJaWYgbXRoZCBpbiBbJzInLCcwMiddOgoJCQkJCWhhYmliLnN1Ym1pdChybmRtMix1aWQscGFzc2xpc3QpCgkJCQlpZiBtdGhkIGluIFsnMycsJzAzJ106CgkJCQkJaGFiaWIuc3VibWl0KHJuZG0zLHVpZCxwYXNzbGlzdCkKCQlwcmludCgnXDAzM1sxOzM3bScpCgkJcHJpbnQoZidccntBfeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgScpCgkJcHJpbnQoZid7Qn3inbJ7QX09e0J94p2ze0d9IFRIRSBQUk9DRVNTIEhBUyBDT01QTEVURUQnKQoJCXByaW50KGYne0J94p2ye0F9PXtCfeKds3tHfSBUT1RBTCBPSyBJRCA6ICcrc3RyKGxlbihva3MpKSkKCQlwcmludChmJ3tCfeKdsntBfT17Qn3inbN7R30gVE9UQUwgQ1AgSUQgOiAnK3N0cihsZW4oY3BzKSkpCgkJcHJpbnQoZidccntBfeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgScpCgkJaW5wdXQoZid7Qn3inbJ7QX09e0J94p2ze0d9IFBSRVNTIEVOVEVSIFRPIEJBQ0sgJykKCQltZW51KCkJCQojX19fX19fX19fX19fX19fX19ffCBGSUxFIE1FVEhPRCBNMSB8X19fX19fX19fX19fX19fX19fIwpkZWYgYXBpMShpZHMsbmFtZXMscGFzc2xpc3QpOgogICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGdsb2JhbCBva3MsbG9vcCxzaW1faWQsZGV2aWNlCiAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYnXHJccntCfeKdsntHfUpBU1JFTC1YRHtCfeKds3tHfSAlcyB7Qn18e0d9IE9Le0J9fHtHfUNQe0d9ICVze0J9fHtHfSVzICclKGxvb3AsbGVuKG9rcyksbGVuKGNwcykpKTtzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICAgICAgICAgIGZuID0gbmFtZXMuc3BsaXQoJyAnKVswXQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICBsbiA9IG5hbWVzLnNwbGl0KCcgJylbMV0KICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgICAgbG4gPSBmbgogICAgICAgICAgICAgICAgZm9yIHB3IGluIHBhc3NsaXN0OgogICAgICAgICAgICAgICAgICAgICAgICBwYXMgPSBwdy5yZXBsYWNlKCdmaXJzdCcsZm4ubG93ZXIoKSkucmVwbGFjZSgnRmlyc3QnLGZuKS5yZXBsYWNlKCdsYXN0Jyxsbi5sb3dlcigpKS5yZXBsYWNlKCdMYXN0JyxsbikucmVwbGFjZSgnTmFtZScsbmFtZXMpLnJlcGxhY2UoJ25hbWUnLG5hbWVzLmxvd2VyKCkpCiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuID0gJzM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicKICAgICAgICAgICAgICAgICAgICAgICAgZmJhdiA9IGYne3JhbmRvbS5yYW5kaW50KDExMSw5OTkpfS4wLjAue3JhbmRvbS5yYW5kaW50KDExLDk5KX0ue3JhbmRvbS5yYW5kaW50KDExMSw5OTkpfScKICAgICAgICAgICAgICAgICAgICAgICAgZmJidiA9IHN0cihyYW5kb20ucmFuZGludCgxMTExMTExMTEsOTk5OTk5OTk5KSkKICAgICAgICAgICAgICAgICAgICAgICAgYW5kcm9pZF92ZXJzaW9uID0gZGV2aWNlWydhbmRyb2lkX3ZlcnNpb24nXQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IGRldmljZVsnbW9kZWwnXQogICAgICAgICAgICAgICAgICAgICAgICBidWlsZCA9IGRldmljZVsnYnVpbGQnXQogICAgICAgICAgICAgICAgICAgICAgICBmYmxjID0gZGV2aWNlWydmYmxjJ10KICAgICAgICAgICAgICAgICAgICAgICAgZmJjciA9IHNpbV9pZAogICAgICAgICAgICAgICAgICAgICAgICBmYm1mID0gZGV2aWNlWydmYm1mJ10KICAgICAgICAgICAgICAgICAgICAgICAgZmJiZCA9IGRldmljZVsnZmJiZCddCiAgICAgICAgICAgICAgICAgICAgICAgIGZiZHYgPSBkZXZpY2VbJ2ZiZHYnXQogICAgICAgICAgICAgICAgICAgICAgICBmYnN2ID0gZGV2aWNlWydmYnN2J10KICAgICAgICAgICAgICAgICAgICAgICAgZmJjYSA9IGRldmljZVsnZmJjYSddCiAgICAgICAgICAgICAgICAgICAgICAgIGZiZG0gPSBkZXZpY2VbJ2ZiZG0nXQogICAgICAgICAgICAgICAgICAgICAgICBmYmZ3ID0gJzEnCiAgICAgICAgICAgICAgICAgICAgICAgIGZicnYgPSAnMCcKICAgICAgICAgICAgICAgICAgICAgICAgZmJhbiA9ICdGQjRBJwogICAgICAgICAgICAgICAgICAgICAgICBmYnBuID0gJ2NvbS5mYWNlYm9vay5rYXRhbmEnCiAgICAgICAgICAgICAgICAgICAgICAgIHVhID0gJ0RhdmlrLzIuMS4wIChMaW51eDsgVTsgQW5kcm9pZCAnK2FuZHJvaWRfdmVyc2lvbisnLjAuMTsgJyttb2RlbCsnIEJ1aWxkLycrYnVpbGQrJykgW0ZCQU4vJytmYmFuKyc7RkJBVi8nK2ZiYXYrJztGQkJWLycrZmJidisnO0ZCRE0ve2RlbnNpdHk9Mi42MjUsd2lkdGg9MTA4MCxoZWlnaHQ9MTkyMH07RkJMQy8nK2ZibGMrJztGQlJWLycrc3RyKHJhbmRvbS5yYW5kaW50KDAwMDAwMDAwMCw5OTk5OTk5OTkpKSsnO0ZCQ1IvJytmYmNyKyc7RkJNRi8nK2ZibWYrJztGQkJELycrZmJiZCsnO0ZCUE4vJytmYnBuKyc7RkJEVi8nK2ZiZHYrJztGQlNWLycrZmJzdisnO0ZCT1AvMTk7RkJDQS8nK2ZiY2ErJztdJwogICAgICAgICAgICAgICAgICAgICAgICByYW5kb21fc2VlZCA9IHJhbmRvbS5SYW5kb20oKQogICAgICAgICAgICAgICAgICAgICAgICBhZGlkID0gc3RyKCcnLmpvaW4ocmFuZG9tX3NlZWQuY2hvaWNlcyhzdHJpbmcuaGV4ZGlnaXRzLCBrPTE2KSkpCiAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZV9pZCA9IHN0cih1dWlkLnV1aWQ0KCkpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3VyZSA9IHN0cih1dWlkLnV1aWQ0KCkpCiAgICAgICAgICAgICAgICAgICAgICAgIGZhbWlseSA9IHN0cih1dWlkLnV1aWQ0KCkpCiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuID0gJzM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicKICAgICAgICAgICAgICAgICAgICAgICAgeGQgPXN0cignJy5qb2luKHJhbmRvbV9zZWVkLmNob2ljZXMoc3RyaW5nLmRpZ2l0cywgaz0yMCkpKQogICAgICAgICAgICAgICAgICAgICAgICBzaW1fc2VyaWFscyA9IGYnWyJ7eGR9Il0nCiAgICAgICAgICAgICAgICAgICAgICAgIGxpID0gWycyOCcsJzI5JywnMjEwJ10KICAgICAgICAgICAgICAgICAgICAgICAgbGkyID0gcmFuZG9tLmNob2ljZShsaSkKICAgICAgICAgICAgICAgICAgICAgICAgajEgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoMikpCiAgICAgICAgICAgICAgICAgICAgICAgIGphem9lc3QgPSBsaTIrajEKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRpZCc6YWRpZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9ybWF0JzonanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RldmljZV9pZCc6ZGV2aWNlX2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbWFpbCc6aWRzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwYXNzd29yZCc6cGFzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9hbmFseXRpY3NfY2xhaW1zJzonMScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbW11bml0eV9pZCc6JycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNpbV9jb3VudHJ5IjogImlkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHJ5X251bSc6JzEnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmYW1pbHlfZGV2aWNlX2lkJzpmYW1pbHksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NpbV9zZXJpYWxzJzpzaW1fc2VyaWFscywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3JlZGVudGlhbHNfdHlwZSc6J3Bhc3N3b3JkJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc291cmNlJzonbG9naW4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnJvcl9kZXRhaWxfdHlwZSc6J2J1dHRvbl93aXRoX2Rpc2FibGVkJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbG9nZ2VkX291dF9pZCc6IHN0cih1dWlkLnV1aWQ0KCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMnOicxJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfbWFjaGluZV9pZCc6JzEnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aWVyJzogJ3JlZ3VsYXInLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZWdfaW5zdGFuY2UnOiBzdHIodXVpZC51dWlkNCgpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWV0YV9pbmZfZmJtZXRhJzonJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3VycmVudGx5X2xvZ2dlZF9pbl91c2VyaWQnOicwJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbG9jYWxlJzpmYmxjLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjbGllbnRfY291bnRyeV9jb2RlJzonJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lJzonYXV0aGVudGljYXRlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmJfYXBpX2NhbGxlcl9jbGFzcyc6ICdjb20uZmFjZWJvb2suYWNjb3VudC5sb2dpbi5wcm90b2NvbC5GYjRhQXV0aEhhbmRsZXInLAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzpmJ09BdXRoIHthY2Nlc3NUb2tlbn0nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdYLUZCLUZyaWVuZGx5LU5hbWUnOidhdXRoZW50aWNhdGUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdYLUZCLUNvbm5lY3Rpb24tQmFuZHdpZHRoJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU3LDNlNykpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdYLUZCLU5ldC1ITkknOiBzdHIocmFuZG9tLnJhbmRpbnQoMTExMTEsIDk5OTk5KSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1gtRkItU0lNLUhOSSc6IHN0cihyYW5kb20ucmFuZGludCgxMTExMSwgOTk5OTkpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVXNlci1BZ2VudCc6IltGQkFOL0ZCNEE7RkJBVi81NC4wLjAuMzc5NTtGQkJWLzY2MjA1OTg1W0ZCQU4vT3JjYS1BbmRyb2lkO0ZCQVYvMjQ3LjAuMC4zMC44NDtGQlBOL2NvbS5mYWNlYm9vay5vcmNhO0ZCQlYvNDEwMTQwOTgzO0ZCTEMvZW5fVVM7RkJDQS9hcm02NC12OGE6O0ZCQ1IvVWZvbmU7RkJNRi9JTkZJTklYIE1PQklMSVRZIExJTUlURUQ7RkJCRC9JbmZpbml4O0ZCRFYvSW5maW5peCBYNjk1O0ZCU1YvMTE7RkJETS97ZGVuc2l0eT0yLjAsd2lkdGg9NzIwLGhlaWdodD0xNDQwfTtdIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0LUVuY29kaW5nJzonZ3ppcCwgZGVmbGF0ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdYLUZCLUhUVFAtRW5naW5lJzogJ0xpZ2VyJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gJ2h0dHBzOi8vYi1ncmFwaC5mYWNlYm9vay5jb20vYXV0aC9sb2dpbicKICAgICAgICAgICAgICAgICAgICAgICAgcG8gPSByZXF1ZXN0cy5wb3N0KHVybCxkYXRhPWRhdGEsaGVhZGVycz1oZWFkZXJzKS5qc29uKCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3Nlc3Npb25fa2V5JyBpbiBwbzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHJccntCfeKdsntHfUpBUy1PS3tCfeKds3tHfSAnK2lkcytmJyB8ICcrcGFzKydcMDMzWzE7OTdtJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNva2kgPSAiOyIuam9pbihpWyJuYW1lIl0rIj0iK2lbInZhbHVlIl0gZm9yIGkgaW4gcG9bInNlc3Npb25fY29va2llcyJdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcclxye0J94p2ye0d9Q09PS0lFe0J94p2zPntBfSAiK2Nva2kpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0pBUy1GSUxFLU0xLU9LLnR4dCcsICdhJykud3JpdGUoaWRzKycgfCAnK3BhcysnIHwtPiAnK2Nva2krIlxuIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoaWRzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcG9bJ2Vycm9yJ11bJ21lc3NhZ2UnXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICd5JyBpbiBwY3A6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHJccntCfeKdsntZfUpBUy1DUHtCfeKds3tZfSAnK2lkcysnIHwgJytwYXMrJ1wwMzNbMTs5N20nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0pBUy1DUC50eHQnLCdhJykud3JpdGUoaWRzKyd8JytwYXMrJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZChpZHMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGxvb3ArPTEKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBwYXNzCiNfX19fX19fX19fX19fX19fX198IEZJTEUgTUVUSE9EIE0yIHxfX19fX19fX19fX19fX19fX18jCmRlZiBhcGkyKGlkcyxuYW1lcyxwYXNzbGlzdCk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZ2xvYmFsIG9rcyxsb29wLHNpbV9pZAogICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmJ1xyXHJ7Qn3inbJ7R31KQVNSRUwtWER7Qn3inbN7R30gJXMge0J9fHtHfSBPS3tCfXx7R31DUHtHfSAlc3tCfXx7R30lcyAnJShsb29wLGxlbihva3MpLGxlbihjcHMpKSk7c3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgICAgICAgICBmbiA9IG5hbWVzLnNwbGl0KCcgJylbMF0KICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgbG4gPSBuYW1lcy5zcGxpdCgnICcpWzFdCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGxuID0gZm4KICAgICAgICAgICAgICAgIGZvciBwdyBpbiBwYXNzbGlzdDoKICAgICAgICAgICAgICAgICAgICAgICAgcGFzID0gcHcucmVwbGFjZSgnZmlyc3QnLGZuLmxvd2VyKCkpLnJlcGxhY2UoJ0ZpcnN0JyxmbikucmVwbGFjZSgnbGFzdCcsbG4ubG93ZXIoKSkucmVwbGFjZSgnTGFzdCcsbG4pLnJlcGxhY2UoJ05hbWUnLG5hbWVzKS5yZXBsYWNlKCduYW1lJyxuYW1lcy5sb3dlcigpKQogICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbiA9ICczNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInCiAgICAgICAgICAgICAgICAgICAgICAgIGZiYXYgPSBmJ3tyYW5kb20ucmFuZGludCgxMTEsOTk5KX0uMC4wLntyYW5kb20ucmFuZGludCgxMSw5OSl9LntyYW5kb20ucmFuZGludCgxMTEsOTk5KX0nCiAgICAgICAgICAgICAgICAgICAgICAgIGZiYnYgPSBzdHIocmFuZG9tLnJhbmRpbnQoMTExMTExMTExLDk5OTk5OTk5OSkpCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZHJvaWRfdmVyc2lvbiA9IGRldmljZVsnYW5kcm9pZF92ZXJzaW9uJ10KICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBkZXZpY2VbJ21vZGVsJ10KICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGQgPSBkZXZpY2VbJ2J1aWxkJ10KICAgICAgICAgICAgICAgICAgICAgICAgZmJsYyA9IGRldmljZVsnZmJsYyddCiAgICAgICAgICAgICAgICAgICAgICAgIGZiY3IgPSBzaW1faWQKICAgICAgICAgICAgICAgICAgICAgICAgZmJtZiA9IGRldmljZVsnZmJtZiddCiAgICAgICAgICAgICAgICAgICAgICAgIGZiYmQgPSBkZXZpY2VbJ2ZiYmQnXQogICAgICAgICAgICAgICAgICAgICAgICBmYmR2ID0gZGV2aWNlWydmYmR2J10KICAgICAgICAgICAgICAgICAgICAgICAgZmJzdiA9IGRldmljZVsnZmJzdiddCiAgICAgICAgICAgICAgICAgICAgICAgIGZiY2EgPSBkZXZpY2VbJ2ZiY2EnXQogICAgICAgICAgICAgICAgICAgICAgICBmYmRtID0gZGV2aWNlWydmYmRtJ10KICAgICAgICAgICAgICAgICAgICAgICAgZmJmdyA9ICcxJwogICAgICAgICAgICAgICAgICAgICAgICBmYnJ2ID0gJzAnCiAgICAgICAgICAgICAgICAgICAgICAgIGZiYW4gPSAnRkI0QScKICAgICAgICAgICAgICAgICAgICAgICAgZmJwbiA9ICdjb20uZmFjZWJvb2sua2F0YW5hJwogICAgICAgICAgICAgICAgICAgICAgICB1YSA9ICdEYXZpay8yLjEuMCAoTGludXg7IFU7IEFuZHJvaWQgJythbmRyb2lkX3ZlcnNpb24rJy4wLjE7ICcrbW9kZWwrJyBCdWlsZC8nK2J1aWxkKycpIFtGQkFOLycrZmJhbisnO0ZCQVYvJytmYmF2Kyc7RkJCVi8nK2ZiYnYrJztGQkRNL3tkZW5zaXR5PTIuNjI1LHdpZHRoPTEwODAsaGVpZ2h0PTE5MjB9O0ZCTEMvJytmYmxjKyc7RkJSVi8nK3N0cihyYW5kb20ucmFuZGludCgwMDAwMDAwMDAsOTk5OTk5OTk5KSkrJztGQkNSLycrZmJjcisnO0ZCTUYvJytmYm1mKyc7RkJCRC8nK2ZiYmQrJztGQlBOLycrZmJwbisnO0ZCRFYvJytmYmR2Kyc7RkJTVi8nK2Zic3YrJztGQk9QLzE5O0ZCQ0EvJytmYmNhKyc7XScKICAgICAgICAgICAgICAgICAgICAgICAgcmFuZG9tX3NlZWQgPSByYW5kb20uUmFuZG9tKCkKICAgICAgICAgICAgICAgICAgICAgICAgYWRpZCA9IHN0cignJy5qb2luKHJhbmRvbV9zZWVkLmNob2ljZXMoc3RyaW5nLmhleGRpZ2l0cywgaz0xNikpKQogICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VfaWQgPSBzdHIodXVpZC51dWlkNCgpKQogICAgICAgICAgICAgICAgICAgICAgICBzZWN1cmUgPSBzdHIodXVpZC51dWlkNCgpKQogICAgICAgICAgICAgICAgICAgICAgICBmYW1pbHkgPSBzdHIodXVpZC51dWlkNCgpKQogICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbiA9ICczNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInCiAgICAgICAgICAgICAgICAgICAgICAgIHhkID1zdHIoJycuam9pbihyYW5kb21fc2VlZC5jaG9pY2VzKHN0cmluZy5kaWdpdHMsIGs9MjApKSkKICAgICAgICAgICAgICAgICAgICAgICAgc2ltX3NlcmlhbHMgPSBmJ1sie3hkfSJdJwogICAgICAgICAgICAgICAgICAgICAgICBsaSA9IFsnMjgnLCcyOScsJzIxMCddCiAgICAgICAgICAgICAgICAgICAgICAgIGxpMiA9IHJhbmRvbS5jaG9pY2UobGkpCiAgICAgICAgICAgICAgICAgICAgICAgIGoxID0gJycuam9pbihyYW5kb20uY2hvaWNlKHN0cmluZy5kaWdpdHMpIGZvciBfIGluIHJhbmdlKDIpKQogICAgICAgICAgICAgICAgICAgICAgICBqYXpvZXN0ID0gbGkyK2oxCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkaWQnOmFkaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Zvcm1hdCc6J2pzb24nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXZpY2VfaWQnOmRldmljZV9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZW1haWwnOmlkcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFzc3dvcmQnOnBhcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2Vzc2lvbl9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhZHZlcnRpc2VyX2lkIjogc3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlZ19pbnN0YW5jZSI6IHN0cih1dWlkLnV1aWQ0KCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsb2dnZWRfb3V0X2lkIjogc3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhhc2hfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2ltX2NvdW50cnkiOiAiaWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuZXR3b3JrX2NvdW50cnkiOiAiaWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJlbnJvbGxfbWlzYXV0aCI6ICJmYWxzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX2FuYWx5dGljc19jbGFpbXMnOicxJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3JlZGVudGlhbHNfdHlwZSc6J3Bhc3N3b3JkJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc291cmNlJzonbG9naW4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnJvcl9kZXRhaWxfdHlwZSc6J2J1dHRvbl93aXRoX2Rpc2FibGVkJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZW5yb2xsX21pc2F1dGgnOidmYWxzZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNwbCI6ICJ0cnVlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzJzonMScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX21hY2hpbmVfaWQnOicxJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWV0YV9pbmZfZmJtZXRhJzonJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3VycmVudGx5X2xvZ2dlZF9pbl91c2VyaWQnOicwJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lJzonYXV0aGVudGljYXRlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmJfYXBpX2NhbGxlcl9jbGFzcyI6ICJjb20uZmFjZWJvb2suYWNjb3VudC5sb2dpbi5wcm90b2NvbC5GYjRhQXV0aEhhbmRsZXIiLAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzpmJ09BdXRoIHthY2Nlc3NUb2tlbn0nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJYLUZCLUNvbm5lY3Rpb24tQmFuZHdpZHRoIjogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwMDAwLCAzMDAwMDAwMCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJYLUZCLU5ldC1ITkkiOiBzdHIocmFuZG9tLnJhbmRpbnQoOTAwMDAwLCA5OTk5OTkpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiWC1GQi1TSU0tSE5JIjogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdYLUZCLUZyaWVuZGx5LU5hbWUnOidhdXRoZW50aWNhdGUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdYLUZCLUNvbm5lY3Rpb24tVHlwZSc6J3Vua25vd24nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50Jzp1YSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0LUVuY29kaW5nJzonZ3ppcCwgZGVmbGF0ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdYLUZCLUhUVFAtRW5naW5lJzogJ0xpZ2VyJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luJwogICAgICAgICAgICAgICAgICAgICAgICBwbyA9IHJlcXVlc3RzLnBvc3QodXJsLGRhdGE9ZGF0YSxoZWFkZXJzPWhlYWRlcnMpLmpzb24oKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHBvOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxye0J94p2ye0d9SkFTLU9Le0J94p2ze0d9ICcraWRzK2YnIHwgJytwYXMrJ1wwMzNbMTs5N20nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29raSA9ICI7Ii5qb2luKGlbIm5hbWUiXSsiPSIraVsidmFsdWUiXSBmb3IgaSBpbiBwb1sic2Vzc2lvbl9jb29raWVzIl0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIlxyXHJ7Qn3inbJ7R31DT09LSUV7Qn3inbM+e0F9ICIrY29raSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvSkFTLUZJTEUtTTItT0sudHh0JywgJ2EnKS53cml0ZShpZHMrJyB8ICcrcGFzKycgfC0+ICcrY29raSsiXG4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZChpZHMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBwb1snZXJyb3InXVsnbWVzc2FnZSddOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3knIGluIHBjcDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxye0J94p2ye1l9SkFTLUNQe0J94p2ze1l9ICcraWRzKycgfCAnK3BhcysnXDAzM1sxOzk3bScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvSkFTLUNQLnR4dCcsJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHMuYXBwZW5kKGlkcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgbG9vcCs9MQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHBhc3MKI19fX19fX19fX19fX19fX19fX3wgUkFORE9NIE1FVEhPRCBNMSB8X19fX19fX19fX19fX19fX19fIwpkZWYgcm5kbTEodWlkLHBhc3NsaXN0KToKICAgICAgICBnbG9iYWwgbG9vcAogICAgICAgIGdsb2JhbCBva3MKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYnXHJccntCfeKdsntHfUVNUkFOLU0xe0J94p2ze0d9ICVzIHtCfXx7R30gT0t7Qn18e0d9Q1B7R30gJXN7Qn18e0d9JXMgJyUobG9vcCxsZW4ob2tzKSxsZW4oY3BzKSkpO3N5cy5zdGRvdXQuZmx1c2goKQogICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGZvciBwYXMgaW4gcGFzc2xpc3Q6CiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuID0gJzM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicKICAgICAgICAgICAgICAgICAgICAgICAgZmJhdiA9IGYne3JhbmRvbS5yYW5kaW50KDExMSw5OTkpfS4wLjAue3JhbmRvbS5yYW5kaW50KDExLDk5KX0ue3JhbmRvbS5yYW5kaW50KDExMSw5OTkpfScKICAgICAgICAgICAgICAgICAgICAgICAgZmJidiA9IHN0cihyYW5kb20ucmFuZGludCgxMTExMTExMTEsOTk5OTk5OTk5KSkKICAgICAgICAgICAgICAgICAgICAgICAgYW5kcm9pZF92ZXJzaW9uID0gZGV2aWNlWydhbmRyb2lkX3ZlcnNpb24nXQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IGRldmljZVsnbW9kZWwnXQogICAgICAgICAgICAgICAgICAgICAgICBidWlsZCA9IGRldmljZVsnYnVpbGQnXQogICAgICAgICAgICAgICAgICAgICAgICBmYmxjID0gZGV2aWNlWydmYmxjJ10KICAgICAgICAgICAgICAgICAgICAgICAgZmJjciA9IHNpbV9pZAogICAgICAgICAgICAgICAgICAgICAgICBmYm1mID0gZGV2aWNlWydmYm1mJ10KICAgICAgICAgICAgICAgICAgICAgICAgZmJiZCA9IGRldmljZVsnZmJiZCddCiAgICAgICAgICAgICAgICAgICAgICAgIGZiZHYgPSBkZXZpY2VbJ2ZiZHYnXQogICAgICAgICAgICAgICAgICAgICAgICBmYnN2ID0gZGV2aWNlWydmYnN2J10KICAgICAgICAgICAgICAgICAgICAgICAgZmJjYSA9IGRldmljZVsnZmJjYSddCiAgICAgICAgICAgICAgICAgICAgICAgIGZiZG0gPSBkZXZpY2VbJ2ZiZG0nXQogICAgICAgICAgICAgICAgICAgICAgICBmYmZ3ID0gJzEnCiAgICAgICAgICAgICAgICAgICAgICAgIGZicnYgPSAnMCcKICAgICAgICAgICAgICAgICAgICAgICAgZmJhbiA9ICdGQjRBJwogICAgICAgICAgICAgICAgICAgICAgICBmYnBuID0gJ2NvbS5mYWNlYm9vay5rYXRhbmEnCiAgICAgICAgICAgICAgICAgICAgICAgIHVhID0gJ0RhdmlrLzIuMS4wIChMaW51eDsgVTsgQW5kcm9pZCAnK2FuZHJvaWRfdmVyc2lvbisnLjAuMTsgJyttb2RlbCsnIEJ1aWxkLycrYnVpbGQrJykgW0ZCQU4vJytmYmFuKyc7RkJBVi8nK2ZiYXYrJztGQkJWLycrZmJidisnO0ZCRE0ve2RlbnNpdHk9Mi42MjUsd2lkdGg9MTA4MCxoZWlnaHQ9MTkyMH07RkJMQy8nK2ZibGMrJztGQlJWLycrc3RyKHJhbmRvbS5yYW5kaW50KDAwMDAwMDAwMCw5OTk5OTk5OTkpKSsnO0ZCQ1IvJytmYmNyKyc7RkJNRi8nK2ZibWYrJztGQkJELycrZmJiZCsnO0ZCUE4vJytmYnBuKyc7RkJEVi8nK2ZiZHYrJztGQlNWLycrZmJzdisnO0ZCT1AvMTk7RkJDQS8nK2ZiY2ErJztdJwogICAgICAgICAgICAgICAgICAgICAgICByYW5kb21fc2VlZCA9IHJhbmRvbS5SYW5kb20oKQogICAgICAgICAgICAgICAgICAgICAgICBhZGlkID0gc3RyKCcnLmpvaW4ocmFuZG9tX3NlZWQuY2hvaWNlcyhzdHJpbmcuaGV4ZGlnaXRzLCBrPTE2KSkpCiAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZV9pZCA9IHN0cih1dWlkLnV1aWQ0KCkpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3VyZSA9IHN0cih1dWlkLnV1aWQ0KCkpCiAgICAgICAgICAgICAgICAgICAgICAgIGZhbWlseSA9IHN0cih1dWlkLnV1aWQ0KCkpCiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuID0gJzM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicKICAgICAgICAgICAgICAgICAgICAgICAgeGQgPXN0cignJy5qb2luKHJhbmRvbV9zZWVkLmNob2ljZXMoc3RyaW5nLmRpZ2l0cywgaz0yMCkpKQogICAgICAgICAgICAgICAgICAgICAgICBzaW1fc2VyaWFscyA9IGYnWyJ7eGR9Il0nCiAgICAgICAgICAgICAgICAgICAgICAgIGxpID0gWycyOCcsJzI5JywnMjEwJ10KICAgICAgICAgICAgICAgICAgICAgICAgbGkyID0gcmFuZG9tLmNob2ljZShsaSkKICAgICAgICAgICAgICAgICAgICAgICAgajEgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoMikpCiAgICAgICAgICAgICAgICAgICAgICAgIGphem9lc3QgPSBsaTIrajEKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRpZCc6YWRpZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9ybWF0JzonanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RldmljZV9pZCc6ZGV2aWNlX2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbWFpbCc6dWlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwYXNzd29yZCc6cGFzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsb2dnZWRfb3V0X2lkIjogc3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhhc2hfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVnX2luc3RhbmNlIjogc3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNlc3Npb25faWQiOiBzdHIodXVpZC51dWlkNCgpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYWR2ZXJ0aXNlcl9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9hbmFseXRpY3NfY2xhaW1zJzonMScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NyZWRlbnRpYWxzX3R5cGUnOidwYXNzd29yZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NvdXJjZSc6J2xvZ2luJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2ltX2NvdW50cnkiOiAiaWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuZXR3b3JrX2NvdW50cnkiOiAiaWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWxhdGl2ZV91cmwiOiAibWV0aG9kL2F1dGgubG9naW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnJvcl9kZXRhaWxfdHlwZSc6J2J1dHRvbl93aXRoX2Rpc2FibGVkJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZW5yb2xsX21pc2F1dGgnOidmYWxzZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX3Nlc3Npb25fY29va2llcyc6JzEnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9tYWNoaW5lX2lkJzonMScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZiX2FwaV9yZXFfZnJpZW5kbHlfbmFtZSc6J2F1dGhlbnRpY2F0ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZiX2FwaV9jYWxsZXJfY2xhc3MiOiAiY29tLmZhY2Vib29rLmFjY291bnQubG9naW4ucHJvdG9jb2wuRmI0YUF1dGhIYW5kbGVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ZidPQXV0aCB7YWNjZXNzVG9rZW59JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiWC1GQi1Db25uZWN0aW9uLVR5cGUiOiAibW9iaWxlLkNUUmFkaW9BY2Nlc3NUZWNobm9sb2d5TFRFIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiWC1GQi1Db25uZWN0aW9uLUJhbmR3aWR0aCI6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMDAwMCwgMzAwMDAwMDApKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiWC1GQi1OZXQtSE5JIjogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJYLUZCLVNJTS1ITkkiOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1gtRkItRnJpZW5kbHktTmFtZSc6J2F1dGhlbnRpY2F0ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1gtRkItQ29ubmVjdGlvbi1UeXBlJzondW5rbm93bicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOnVhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBY2NlcHQtRW5jb2RpbmcnOidnemlwLCBkZWZsYXRlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1gtRkItSFRUUC1FbmdpbmUnOiAnTGlnZXInCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSAnaHR0cHM6Ly9iLWdyYXBoLmZhY2Vib29rLmNvbS9hdXRoL2xvZ2luJwogICAgICAgICAgICAgICAgICAgICAgICBwbyA9IHJlcXVlc3RzLnBvc3QodXJsLGRhdGE9ZGF0YSxoZWFkZXJzPWhlYWRlcnMpLmpzb24oKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHBvOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxye0J94p2ye0d9RU1SQU4tT0t7Qn3inbN7R30gJyt1aWQrZicgfCAnK3BhcysnXDAzM1sxOzk3bScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2tpID0gIjsiLmpvaW4oaVsibmFtZSJdKyI9IitpWyJ2YWx1ZSJdIGZvciBpIGluIHBvWyJzZXNzaW9uX2Nvb2tpZXMiXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHJccntCfeKdsntHfUNPT0tJRXtCfeKdsz57QX0gIitjb2tpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC9FTVJBTi1SQU5ET00tTTEtT0sudHh0JywgJ2EnKS53cml0ZSh1aWQrJyB8ICcrcGFzKycgfC0+ICcrY29raSsiXG4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh1aWQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBwb1snZXJyb3InXVsnbWVzc2FnZSddOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3knIGluIHBjcDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxye0J94p2ye1l9RU1SQU4tQ1B7Qn3inbN7WX0gJyt1aWQrJyB8ICcrcGFzKydcMDMzWzE7OTdtJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC9FTVJBTi1DUC50eHQnLCdhJykud3JpdGUodWlkKyd8JytwYXMrJ1xuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZCh1aWQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGxvb3ArPTEKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBwYXNzCiNfX19fX19fX19fX19fX19fX198IFJBTkRPTSBNRVRIT0QgTTIgfF9fX19fX19fX19fX19fX19fXyMKZGVmIHJuZG0yKHVpZCxwYXNzbGlzdCk6CiAgICAgICAgZ2xvYmFsIGxvb3AKICAgICAgICBnbG9iYWwgb2tzCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmJ1xyXHJ7Qn3inbJ7R31FTVJBTi1NMntCfeKds3tHfSAlcyB7Qn18e0d9IE9Le0J9fHtHfUNQe0d9ICVze0J9fHtHfSVzICclKGxvb3AsbGVuKG9rcyksbGVuKGNwcykpKTtzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBmb3IgcGFzIGluIHBhc3NsaXN0OgogICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbiA9ICczNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInCiAgICAgICAgICAgICAgICAgICAgICAgIGZiYXYgPSBmJ3tyYW5kb20ucmFuZGludCgxMTEsOTk5KX0uMC4wLntyYW5kb20ucmFuZGludCgxMSw5OSl9LntyYW5kb20ucmFuZGludCgxMTEsOTk5KX0nCiAgICAgICAgICAgICAgICAgICAgICAgIGZiYnYgPSBzdHIocmFuZG9tLnJhbmRpbnQoMTExMTExMTExLDk5OTk5OTk5OSkpCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZHJvaWRfdmVyc2lvbiA9IGRldmljZVsnYW5kcm9pZF92ZXJzaW9uJ10KICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBkZXZpY2VbJ21vZGVsJ10KICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGQgPSBkZXZpY2VbJ2J1aWxkJ10KICAgICAgICAgICAgICAgICAgICAgICAgZmJsYyA9IGRldmljZVsnZmJsYyddCiAgICAgICAgICAgICAgICAgICAgICAgIGZiY3IgPSBzaW1faWQKICAgICAgICAgICAgICAgICAgICAgICAgZmJtZiA9IGRldmljZVsnZmJtZiddCiAgICAgICAgICAgICAgICAgICAgICAgIGZiYmQgPSBkZXZpY2VbJ2ZiYmQnXQogICAgICAgICAgICAgICAgICAgICAgICBmYmR2ID0gZGV2aWNlWydmYmR2J10KICAgICAgICAgICAgICAgICAgICAgICAgZmJzdiA9IGRldmljZVsnZmJzdiddCiAgICAgICAgICAgICAgICAgICAgICAgIGZiY2EgPSBkZXZpY2VbJ2ZiY2EnXQogICAgICAgICAgICAgICAgICAgICAgICBmYmRtID0gZGV2aWNlWydmYmRtJ10KICAgICAgICAgICAgICAgICAgICAgICAgZmJmdyA9ICcxJwogICAgICAgICAgICAgICAgICAgICAgICBmYnJ2ID0gJzAnCiAgICAgICAgICAgICAgICAgICAgICAgIGZiYW4gPSAnRkI0QScKICAgICAgICAgICAgICAgICAgICAgICAgZmJwbiA9ICdjb20uZmFjZWJvb2sua2F0YW5hJwogICAgICAgICAgICAgICAgICAgICAgICB1YSA9ICdEYXZpay8yLjEuMCAoTGludXg7IFU7IEFuZHJvaWQgJythbmRyb2lkX3ZlcnNpb24rJy4wLjE7ICcrbW9kZWwrJyBCdWlsZC8nK2J1aWxkKycpIFtGQkFOLycrZmJhbisnO0ZCQVYvJytmYmF2Kyc7RkJCVi8nK2ZiYnYrJztGQkRNL3tkZW5zaXR5PTIuNjI1LHdpZHRoPTEwODAsaGVpZ2h0PTE5MjB9O0ZCTEMvJytmYmxjKyc7RkJSVi8nK3N0cihyYW5kb20ucmFuZGludCgwMDAwMDAwMDAsOTk5OTk5OTk5KSkrJztGQkNSLycrZmJjcisnO0ZCTUYvJytmYm1mKyc7RkJCRC8nK2ZiYmQrJztGQlBOLycrZmJwbisnO0ZCRFYvJytmYmR2Kyc7RkJTVi8nK2Zic3YrJztGQk9QLzE5O0ZCQ0EvJytmYmNhKyc7XScKICAgICAgICAgICAgICAgICAgICAgICAgcmFuZG9tX3NlZWQgPSByYW5kb20uUmFuZG9tKCkKICAgICAgICAgICAgICAgICAgICAgICAgYWRpZCA9IHN0cignJy5qb2luKHJhbmRvbV9zZWVkLmNob2ljZXMoc3RyaW5nLmhleGRpZ2l0cywgaz0xNikpKQogICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VfaWQgPSBzdHIodXVpZC51dWlkNCgpKQogICAgICAgICAgICAgICAgICAgICAgICBzZWN1cmUgPSBzdHIodXVpZC51dWlkNCgpKQogICAgICAgICAgICAgICAgICAgICAgICBmYW1pbHkgPSBzdHIodXVpZC51dWlkNCgpKQogICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbiA9ICczNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInCiAgICAgICAgICAgICAgICAgICAgICAgIHhkID1zdHIoJycuam9pbihyYW5kb21fc2VlZC5jaG9pY2VzKHN0cmluZy5kaWdpdHMsIGs9MjApKSkKICAgICAgICAgICAgICAgICAgICAgICAgc2ltX3NlcmlhbHMgPSBmJ1sie3hkfSJdJwogICAgICAgICAgICAgICAgICAgICAgICBsaSA9IFsnMjgnLCcyOScsJzIxMCddCiAgICAgICAgICAgICAgICAgICAgICAgIGxpMiA9IHJhbmRvbS5jaG9pY2UobGkpCiAgICAgICAgICAgICAgICAgICAgICAgIGoxID0gJycuam9pbihyYW5kb20uY2hvaWNlKHN0cmluZy5kaWdpdHMpIGZvciBfIGluIHJhbmdlKDIpKQogICAgICAgICAgICAgICAgICAgICAgICBqYXpvZXN0ID0gbGkyK2oxCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkaWQnOmFkaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Zvcm1hdCc6J2pzb24nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXZpY2VfaWQnOmRldmljZV9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZW1haWwnOnVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFzc3dvcmQnOnBhcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibG9nZ2VkX291dF9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJoYXNoX2lkIjogc3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlZ19pbnN0YW5jZSI6IHN0cih1dWlkLnV1aWQ0KCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzZXNzaW9uX2lkIjogc3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImFkdmVydGlzZXJfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfYW5hbHl0aWNzX2NsYWltcyc6JzEnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjcmVkZW50aWFsc190eXBlJzoncGFzc3dvcmQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzb3VyY2UnOidsb2dpbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNpbV9jb3VudHJ5IjogImlkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmV0d29ya19jb3VudHJ5IjogImlkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVsYXRpdmVfdXJsIjogIm1ldGhvZC9hdXRoLmxvZ2luIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXJyb3JfZGV0YWlsX3R5cGUnOididXR0b25fd2l0aF9kaXNhYmxlZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Vucm9sbF9taXNhdXRoJzonZmFsc2UnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMnOicxJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfbWFjaGluZV9pZCc6JzEnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUnOidhdXRoZW50aWNhdGUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmYl9hcGlfY2FsbGVyX2NsYXNzIjogImNvbS5mYWNlYm9vay5hY2NvdW50LmxvZ2luLnByb3RvY29sLkZiNGFBdXRoSGFuZGxlciIsCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycz17CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOmYnT0F1dGgge2FjY2Vzc1Rva2VufScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlgtRkItQ29ubmVjdGlvbi1UeXBlIjogIm1vYmlsZS5DVFJhZGlvQWNjZXNzVGVjaG5vbG9neUxURSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlgtRkItQ29ubmVjdGlvbi1CYW5kd2lkdGgiOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAwMDAsIDMwMDAwMDAwKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlgtRkItTmV0LUhOSSI6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMCwgNDAwMDApKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiWC1GQi1TSU0tSE5JIjogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdYLUZCLUZyaWVuZGx5LU5hbWUnOidhdXRoZW50aWNhdGUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdYLUZCLUNvbm5lY3Rpb24tVHlwZSc6J3Vua25vd24nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50Jzp1YSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0LUVuY29kaW5nJzonZ3ppcCwgZGVmbGF0ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdYLUZCLUhUVFAtRW5naW5lJzogJ0xpZ2VyJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gJ2h0dHBzOi8vYi1ncmFwaC5mYWNlYm9vay5jb20vYXV0aC9sb2dpbicKICAgICAgICAgICAgICAgICAgICAgICAgcG8gPSByZXF1ZXN0cy5wb3N0KHVybCxkYXRhPWRhdGEsaGVhZGVycz1oZWFkZXJzKS5qc29uKCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3Nlc3Npb25fa2V5JyBpbiBwbzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHJccntCfeKdsntHfUVNUkFOLU9Le0J94p2ze0d9ICcrdWlkK2YnIHwgJytwYXMrJ1wwMzNbMTs5N20nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29raSA9ICI7Ii5qb2luKGlbIm5hbWUiXSsiPSIraVsidmFsdWUiXSBmb3IgaSBpbiBwb1sic2Vzc2lvbl9jb29raWVzIl0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIlxyXHJ7Qn3inbJ7R31DT09LSUV7Qn3inbM+e0F9ICIrY29raSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvRU1SQU4tUkFORE9NLU0xLU9LLnR4dCcsICdhJykud3JpdGUodWlkKycgfCAnK3BhcysnIHwtPiAnK2Nva2krIlxuIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQodWlkKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcG9bJ2Vycm9yJ11bJ21lc3NhZ2UnXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICd5JyBpbiBwY3A6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHJccntCfeKdsntZfUVNUkFOLUNQe0J94p2ze1l9ICcrdWlkKycgfCAnK3BhcysnXDAzM1sxOzk3bScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvRU1SQU4tQ1AudHh0JywnYScpLndyaXRlKHVpZCsnfCcrcGFzKydcbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQodWlkKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICBsb29wKz0xCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgcGFzcwojX19fX19fX19fX19fX19fX19ffCBSQU5ET00gTUVUSE9EIE0zIHxfX19fX19fX19fX19fX19fX18jCmRlZiBybmRtMyh1aWQscGFzc2xpc3QpOgogICAgICAgIGdsb2JhbCBsb29wCiAgICAgICAgZ2xvYmFsIG9rcwogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZidcclxye0J94p2ye0d9RU1SQU4tTTN7Qn3inbN7R30gJXMge0J9fHtHfSBPS3tCfXx7R31DUHtHfSAlc3tCfXx7R30lcyAnJShsb29wLGxlbihva3MpLGxlbihjcHMpKSk7c3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZm9yIHBhcyBpbiBwYXNzbGlzdDoKICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW4gPSAnMzUwNjg1NTMxNzI4fDYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJwogICAgICAgICAgICAgICAgICAgICAgICBmYmF2ID0gZid7cmFuZG9tLnJhbmRpbnQoMTExLDk5OSl9LjAuMC57cmFuZG9tLnJhbmRpbnQoMTEsOTkpfS57cmFuZG9tLnJhbmRpbnQoMTExLDk5OSl9JwogICAgICAgICAgICAgICAgICAgICAgICBmYmJ2ID0gc3RyKHJhbmRvbS5yYW5kaW50KDExMTExMTExMSw5OTk5OTk5OTkpKQogICAgICAgICAgICAgICAgICAgICAgICBhbmRyb2lkX3ZlcnNpb24gPSBkZXZpY2VbJ2FuZHJvaWRfdmVyc2lvbiddCiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsID0gZGV2aWNlWydtb2RlbCddCiAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkID0gZGV2aWNlWydidWlsZCddCiAgICAgICAgICAgICAgICAgICAgICAgIGZibGMgPSBkZXZpY2VbJ2ZibGMnXQogICAgICAgICAgICAgICAgICAgICAgICBmYmNyID0gc2ltX2lkCiAgICAgICAgICAgICAgICAgICAgICAgIGZibWYgPSBkZXZpY2VbJ2ZibWYnXQogICAgICAgICAgICAgICAgICAgICAgICBmYmJkID0gZGV2aWNlWydmYmJkJ10KICAgICAgICAgICAgICAgICAgICAgICAgZmJkdiA9IGRldmljZVsnZmJkdiddCiAgICAgICAgICAgICAgICAgICAgICAgIGZic3YgPSBkZXZpY2VbJ2Zic3YnXQogICAgICAgICAgICAgICAgICAgICAgICBmYmNhID0gZGV2aWNlWydmYmNhJ10KICAgICAgICAgICAgICAgICAgICAgICAgZmJkbSA9IGRldmljZVsnZmJkbSddCiAgICAgICAgICAgICAgICAgICAgICAgIGZiZncgPSAnMScKICAgICAgICAgICAgICAgICAgICAgICAgZmJydiA9ICcwJwogICAgICAgICAgICAgICAgICAgICAgICBmYmFuID0gJ0ZCNEEnCiAgICAgICAgICAgICAgICAgICAgICAgIGZicG4gPSAnY29tLmZhY2Vib29rLmthdGFuYScKICAgICAgICAgICAgICAgICAgICAgICAgdWEgPSAnRGF2aWsvMi4xLjAgKExpbnV4OyBVOyBBbmRyb2lkICcrYW5kcm9pZF92ZXJzaW9uKycuMC4xOyAnK21vZGVsKycgQnVpbGQvJytidWlsZCsnKSBbRkJBTi8nK2ZiYW4rJztGQkFWLycrZmJhdisnO0ZCQlYvJytmYmJ2Kyc7RkJETS97ZGVuc2l0eT0yLjYyNSx3aWR0aD0xMDgwLGhlaWdodD0xOTIwfTtGQkxDLycrZmJsYysnO0ZCUlYvJytzdHIocmFuZG9tLnJhbmRpbnQoMDAwMDAwMDAwLDk5OTk5OTk5OSkpKyc7RkJDUi8nK2ZiY3IrJztGQk1GLycrZmJtZisnO0ZCQkQvJytmYmJkKyc7RkJQTi8nK2ZicG4rJztGQkRWLycrZmJkdisnO0ZCU1YvJytmYnN2Kyc7RkJPUC8xOTtGQkNBLycrZmJjYSsnO10nCiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmRvbV9zZWVkID0gcmFuZG9tLlJhbmRvbSgpCiAgICAgICAgICAgICAgICAgICAgICAgIGFkaWQgPSBzdHIoJycuam9pbihyYW5kb21fc2VlZC5jaG9pY2VzKHN0cmluZy5oZXhkaWdpdHMsIGs9MTYpKSkKICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlX2lkID0gc3RyKHV1aWQudXVpZDQoKSkKICAgICAgICAgICAgICAgICAgICAgICAgc2VjdXJlID0gc3RyKHV1aWQudXVpZDQoKSkKICAgICAgICAgICAgICAgICAgICAgICAgZmFtaWx5ID0gc3RyKHV1aWQudXVpZDQoKSkKICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW4gPSAnMzUwNjg1NTMxNzI4fDYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJwogICAgICAgICAgICAgICAgICAgICAgICB4ZCA9c3RyKCcnLmpvaW4ocmFuZG9tX3NlZWQuY2hvaWNlcyhzdHJpbmcuZGlnaXRzLCBrPTIwKSkpCiAgICAgICAgICAgICAgICAgICAgICAgIHNpbV9zZXJpYWxzID0gZidbInt4ZH0iXScKICAgICAgICAgICAgICAgICAgICAgICAgbGkgPSBbJzI4JywnMjknLCcyMTAnXQogICAgICAgICAgICAgICAgICAgICAgICBsaTIgPSByYW5kb20uY2hvaWNlKGxpKQogICAgICAgICAgICAgICAgICAgICAgICBqMSA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSgyKSkKICAgICAgICAgICAgICAgICAgICAgICAgamF6b2VzdCA9IGxpMitqMQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhZGlkJzphZGlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb3JtYXQnOidqc29uJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGV2aWNlX2lkJzpkZXZpY2VfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VtYWlsJzp1aWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bhc3N3b3JkJzpwYXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImxvZ2dlZF9vdXRfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaGFzaF9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWdfaW5zdGFuY2UiOiBzdHIodXVpZC51dWlkNCgpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2Vzc2lvbl9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhZHZlcnRpc2VyX2lkIjogc3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX2FuYWx5dGljc19jbGFpbXMnOicxJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3JlZGVudGlhbHNfdHlwZSc6J3Bhc3N3b3JkJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc291cmNlJzonbG9naW4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzaW1fY291bnRyeSI6ICJpZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5ldHdvcmtfY291bnRyeSI6ICJpZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlbGF0aXZlX3VybCI6ICJtZXRob2QvYXV0aC5sb2dpbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Vycm9yX2RldGFpbF90eXBlJzonYnV0dG9uX3dpdGhfZGlzYWJsZWQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbnJvbGxfbWlzYXV0aCc6J2ZhbHNlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzJzonMScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX21hY2hpbmVfaWQnOicxJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lJzonYXV0aGVudGljYXRlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmJfYXBpX2NhbGxlcl9jbGFzcyI6ICJjb20uZmFjZWJvb2suYWNjb3VudC5sb2dpbi5wcm90b2NvbC5GYjRhQXV0aEhhbmRsZXIiLAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzpmJ09BdXRoIHthY2Nlc3NUb2tlbn0nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJYLUZCLUNvbm5lY3Rpb24tVHlwZSI6ICJtb2JpbGUuQ1RSYWRpb0FjY2Vzc1RlY2hub2xvZ3lMVEUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJYLUZCLUNvbm5lY3Rpb24tQmFuZHdpZHRoIjogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwMDAwLCAzMDAwMDAwMCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJYLUZCLU5ldC1ITkkiOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlgtRkItU0lNLUhOSSI6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMCwgNDAwMDApKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnWC1GQi1GcmllbmRseS1OYW1lJzonYXV0aGVudGljYXRlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnWC1GQi1Db25uZWN0aW9uLVR5cGUnOid1bmtub3duJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVXNlci1BZ2VudCc6dWEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FjY2VwdC1FbmNvZGluZyc6J2d6aXAsIGRlZmxhdGUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnWC1GQi1IVFRQLUVuZ2luZSc6ICdMaWdlcicKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9ICdodHRwczovL2ItZ3JhcGguZmFjZWJvb2suY29tL2F1dGgvbG9naW4nCiAgICAgICAgICAgICAgICAgICAgICAgIHBvID0gcmVxdWVzdHMucG9zdCh1cmwsZGF0YT1kYXRhLGhlYWRlcnM9aGVhZGVycykuanNvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdzZXNzaW9uX2tleScgaW4gcG86CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ1xyXHJ7Qn3inbJ7R31FTVJBTi1PS3tCfeKds3tHfSAnK3VpZCtmJyB8ICcrcGFzKydcMDMzWzE7OTdtJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNva2kgPSAiOyIuam9pbihpWyJuYW1lIl0rIj0iK2lbInZhbHVlIl0gZm9yIGkgaW4gcG9bInNlc3Npb25fY29va2llcyJdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcclxye0J94p2ye0d9Q09PS0lFe0J94p2zPntBfSAiK2Nva2kpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0VNUkFOLVJBTkRPTS1NMS1PSy50eHQnLCAnYScpLndyaXRlKHVpZCsnIHwgJytwYXMrJyB8LT4gJytjb2tpKyJcbiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHVpZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHBvWydlcnJvciddWydtZXNzYWdlJ106CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAneScgaW4gcGNwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ1xyXHJ7Qn3inbJ7WX1FTVJBTi1DUHtCfeKds3tZfSAnK3VpZCsnIHwgJytwYXMrJ1wwMzNbMTs5N20nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0VNUkFOLUNQLnR4dCcsJ2EnKS53cml0ZSh1aWQrJ3wnK3BhcysnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHMuYXBwZW5kKHVpZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgbG9vcCs9MQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHBhc3MKI19fX19fX19fX19fX19fX19fX3wgRU5EIHxfX19fX19fX19fX19fX19fX18jCnRyeToKIAogICAgbWVudSgpCmV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoKICAgICAgICBwcmludCgnXG4gTm8gaW50ZXJuZXQgY29ubmVjdGlvbiAuLi4nKQogICAgICAgIGV4aXQoKQpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICBwcmludChlKQ=='))